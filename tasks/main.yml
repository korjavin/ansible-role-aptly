- name: Creating user repo
  user: name={{ aptly_user }} shell=/bin/false

- name: Install aptly debian repository
  apt_repository: repo='deb http://repo.aptly.info/ squeeze main' state=present update_cache=yes

- name: Import aptly key
  apt_key: id=2A194991 keyserver=keys.gnupg.net state=present

- name: Install GPG and nginx
  apt: name={{ item }} state=present update_cache=yes
  with_items:
        - aptly
        - gnupg
        - nginx

- name: Upload repository key
  copy: src="{{ aptly_secret_key_path }}/{{ aptly_secret_key_file }}" dest=/tmp owner={{ aptly_user }} group={{ aptly_user }} mode=0400

- name: Import repository key to gnupg
  shell: >
        ( gpg --list-secret-keys | grep -q "{{ aptly_secret_key_id }}" )
        || gpg --allow-secret-key-import --import /tmp/{{ aptly_secret_key_file }}
  sudo: yes
  sudo_user: "{{ aptly_user }}"

- name: Remove secret key from remote host
  file: path="/tmp/{{ aptly_secret_key_file }}" state=absent

- name: Create repositories
  shell: >
        (aptly repo list -raw | grep -q "{{ item.name }}" )
        || (
            aptly repo create \
                --comment "{{ item.comment|default('\"\"') }}" \
                --distribution "{{ item.distribution|default('main') }}" \
                --component "{{ item.component|default('main') }}" \
                "{{ item.name }}"
        )
  sudo: yes
  sudo_user: "{{ aptly_user }}"
  with_items: aptly_repositories
  when: aptly_repositories is defined

- name: Publish repositories
  shell: >
        (aptly publish list | grep -q "{{ item.name }}")
        || aptly publish repo \
            --gpg-key "{{ aptly_secret_key_id }}" \
            --architectures "{{ item.architectures|default('amd64,i386') }}" \
            "{{ item.name }}" \
            "{{ item.prefix|default(item.name) }}"
  sudo: yes
  sudo_user: "{{ aptly_user }}"
  with_items: aptly_repositories
  when: aptly_repositories is defined

- name: remove nginx 'it works' page
  file: path=/etc/nginx/sites-enabled/default state=absent

- name: Upload nginx configuration file
  template: src=nginx-aptly.conf.j2 dest=/etc/nginx/sites-available/aptly.conf owner=root group=root mode=644
  notify: restart nginx

- name: Creating nginx configuration symlinks
  file: src=/etc/nginx/sites-available/aptly.conf dest=/etc/nginx/sites-enabled/aptly.conf state=link
  notify: restart nginx

